#+TITLE: Planetary Storage
#+AUTHOR: AsmArtisan256
#+DATE: 07-05-2025

#+OPTIONS: html-style:nil
#+OPTIONS: html-scripts:nil

#+OPTIONS: author:nil
#+OPTIONS: email:nil
#+OPTIONS: date:t
#+OPTIONS: toc:nil

#+PROPERTY: header-args :eval no

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/style.css"/>

#+EXPORT_FILE_NAME: planetarystorage

#+BEGIN_EXPORT html
<p class="spacing-64" \>
#+END_EXPORT

#+TOC: headlines 2

#+BEGIN_EXPORT html
<p class="spacing-64" \>
#+END_EXPORT

The =ZIP= file of this challenge contains multiple files. Log files, backup files
and =ldb= files. These =ldb= files seem to be Microsoft Access lock information
files, something I didn't know, actually. The biggest files are the =ldb= ones,
while the rest is very small. The log file is also big but doesn't have anything
interesting.

#+BEGIN_SRC sh
$ stat -c "%y %s %n" -- *
2025-02-07 00:20:58.000000000 +0000 3784 000002.ldb
2025-02-07 00:20:58.000000000 +0000 1545 000007.ldb
2025-02-07 00:20:58.000000000 +0000 1421 000010.ldb
2025-02-07 00:20:58.000000000 +0000 0 000011.log
2025-02-07 00:20:58.000000000 +0000 16 CURRENT
2025-02-07 00:20:58.000000000 +0000 16 CURRENT.bak
2025-02-07 00:20:58.000000000 +0000 0 LOCK
2025-02-07 00:20:58.000000000 +0000 2966 LOG
2025-02-07 00:20:58.000000000 +0000 229 MANIFEST-000012
#+END_SRC

Opening these =ldb= files in an hex editor, it's possible to see =JSON= strings with
a field called =payload= where the value was in =base64=. Picking up on the one in
the file =000002.ldb=.

#+BEGIN_SRC sh :results output
echo "eyJrZXkiOiJcIjdiZjFjNTRlLTA5MjAtNGU2Zi1iNTBiLTE0ZDgzODY3NDdmN1wiIiwib3AiOiJQVVQiLCJ2YWx1ZSI6ImV5SmtZWFJoSWpwYklsUm9hWE1pTENKcGN5SXNJbUVpTENKeVpXUWlMQ0pvWlhKeWFXNW5JU0pkTENKcFpDSTZJbHdpTjJKbU1XTTFOR1V0TURreU1DMDBaVFptTFdJMU1HSXRNVFJrT0RNNE5qYzBOMlkzWENJaWZRPT0ifQ==" | base64 -d | jq
#+END_SRC

#+BEGIN_SRC js
{
    "key": "\"7bf1c54e-0920-4e6f-b50b-14d8386747f7\"",
    "op": "PUT",
    "value": "eyJkYXRhIjpbIlRoaXMiLCJpcyIsImEiLCJyZWQiLCJoZXJyaW5nISJdLCJpZCI6IlwiN2JmMWM1NGUtMDkyMC00ZTZmLWI1MGItMTRkODM4Njc0N2Y3XCIifQ=="
}
#+END_SRC

The =base64= contains more =JSON= that contains *more* =JSON=.

#+BEGIN_SRC sh :results output
echo "eyJkYXRhIjpbIlRoaXMiLCJpcyIsImEiLCJyZWQiLCJoZXJyaW5nISJdLCJpZCI6IlwiN2JmMWM1NGUtMDkyMC00ZTZmLWI1MGItMTRkODM4Njc0N2Y3XCIifQ==" | base64 -d | jq
#+END_SRC

#+BEGIN_SRC js
{
  "data": [
    "This",
    "is",
    "a",
    "red",
    "herring!"
  ],
  "id": "\"7bf1c54e-0920-4e6f-b50b-14d8386747f7\""
}
#+END_SRC

Nothing interesting at all here! But by checking and doing the same on the file
=000010.ldb=, you can get the flag! Honestly, this challenge was possible to solve
just by looking at the files. A lot of =base64=, I was lucky enough to try and
check the =payload= keys in the =JSON= strings that were in those files.

* FOOTER                                                                                              :ignore:
:PROPERTIES:
:clearpage: t
:END:
#+BEGIN_EXPORT html
<hr>
<footer>
  <div class="container">
    <ul class="menu-list">
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a href="/index.html">Home</a>
      </li>
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a href="/articles/articles.html">Articles</a>
      </li>
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a href="/writeups/writeups.html">Write-Ups</a>
      </li>
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a class="inactive-link">07-05-2025</a>
      </li>
    </ul>
  </div>
</footer>
#+END_EXPORT
