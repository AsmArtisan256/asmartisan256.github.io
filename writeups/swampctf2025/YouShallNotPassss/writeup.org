:PROPERTIES:
:ID:       800edf18-a852-4724-8f3c-3508deae5cca
:END:
#+TITLE: You Shall Not Passss
#+AUTHOR: AsmArtisan256
#+DATE: 04-05-2025

#+OPTIONS: html-style:nil
#+OPTIONS: html-scripts:nil

#+OPTIONS: author:nil
#+OPTIONS: email:nil
#+OPTIONS: date:t
#+OPTIONS: toc:nil

#+PROPERTY: header-args :eval no

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/style.css"/>

#+EXPORT_FILE_NAME: youshallnotpassss

#+BEGIN_EXPORT html
<p class="spacing-64" \>
#+END_EXPORT

#+TOC: headlines 2

#+BEGIN_EXPORT html
<p class="spacing-64" \>
#+END_EXPORT

This binary, when ran, asks for a password. Obviously, I inserted the wrong
password:


#+DOWNLOADED: screenshot @ 2025-05-04 13:25:45
#+attr_org: :width 600px
[[file:writeup-img/2025-05-04_13-25-45_screenshot.png]]


Firing up this ELF file in IDA Pro, it's possible to see that the =main= function
is kind of confusing. A lot of XOR operations, including two loops where even
more XOR operations are being done. Before the function returns =0=, there is a
function call. This function call is where the interesting part is:

#+BEGIN_SRC C
void sub_17E0()
{
  size_t v0; // r12
  __m128i *v1; // rax
  __m128i *v2; // rbp

  v0 = sysconf(30);
  v1 = (__m128i *)mmap(0LL, v0, 7, 34, -1, 0LL);
  if ( v1 == (__m128i *)-1LL )
  {
    perror("mmap");
  }
  else
  {
    v2 = v1;
    *v1 = _mm_load_si128((const __m128i *)&xmmword_4180);
    v1[1] = _mm_load_si128((const __m128i *)&xmmword_4190);
    v1[2] = _mm_load_si128((const __m128i *)&xmmword_41A0);
    v1[3] = _mm_load_si128((const __m128i *)&xmmword_41B0);
    v1[4] = _mm_load_si128((const __m128i *)&xmmword_41C0);
    v1[5] = _mm_load_si128((const __m128i *)&xmmword_41D0);
    v1[6] = _mm_load_si128((const __m128i *)&xmmword_41E0);
    v1[7] = _mm_load_si128((const __m128i *)&xmmword_41F0);
    v1[8] = _mm_load_si128((const __m128i *)&xmmword_4200);
    v1[9] = _mm_load_si128((const __m128i *)&xmmword_4210);
    v1[10] = _mm_load_si128((const __m128i *)&xmmword_4220);
    v1[11].m128i_i64[0] = qword_4230;
    v1[11].m128i_i32[2] = dword_4238;
    v1[11].m128i_i16[6] = word_423C;
    ((void (__fastcall *)(void *, char *, char *, void *, void *))v1)(
      &unk_4040,
      &byte_4030,
      &byte_4020,
      &unk_4260,
      &unk_4140);
    munmap(v2, v0);
  }
}
#+END_SRC

First off, there is an =mmap= call and a call to the result of the =mmap= call. This
is confirmed by the number =7= in the =prot= field, which is the result of
=PROT_READ|PROT_WRITE|PROT_EXEC=. Additionaly, there are many values being loaded
into the generated memory region. Also, given that it's impossible to find the
strings that are printed to the terminal, there are more reasons to assume that
the code that interests us is here. An easy way to get the code and get the
=pseudocode= is to debug in IDA Pro. After setting up the breaking where =v1= is
called, we can get the hidden code:

#+BEGIN_SRC C
signed __int64 __fastcall sub_7FFFF7FBD000(const char *buf, const char *a2, const char *a3, char *a4, __int64 a5)
{
  signed __int64 v9; // rax
  signed __int64 v10; // rax
  unsigned int v11; // eax
  __int64 v12; // rdx
  int v13; // esi

  v9 = sys_write(0, buf, 0x1CuLL);
  v10 = sys_read(0, a4, 0x24uLL);
  v11 = 1;
  v12 = 0LL;
  v13 = 1;
  do
  {
    v11 = (330 * v11 + 100) % 0x8FF;
    if ( ((unsigned __int8)v11 ^ (unsigned __int8)a4[v12]) != *(_BYTE *)(a5 + v12) )
      v13 = 0;
    ++v12;
  }
  while ( v12 != 36 );
  if ( !v13 )
    a3 = a2;
  return sys_write(1u, a3, 0xAuLL);
}
#+END_SRC

The =sys_read= call is, obviously, the user input. And there is a while loop where
even more XOR operations occur. There is a condition that changes the variable
=v13=, which seems to be the variable that determines if the password is correct
or not, and =v12= seems to be the index. Therefore, the variable =a5= seems to hold
the flag we are looking for. Another interesting thing is that the password has
36 characters. So, according to the while loop, it's possible to get the flag:

#+BEGIN_SRC python
flag = [
    0xDD, 0x9A, 0xDE, 0x4E, 0x69, 0xE1, 0xE9, 0x2C, 0xD2, 0x4E, 0xEC, 0xE7,
    0x18, 0x26, 0x6A, 0x56, 0x79, 0xD8, 0xA3, 0x55, 0x72, 0xBC, 0x76, 0xC4,
    0x0C, 0x0F, 0x9B, 0xBE, 0xC6, 0x81, 0xE2, 0x41, 0x47, 0xA0, 0xF4, 0x26
]

v11 = 1
password = []

for i in range(36):
    new_v11 = (330 * v11 + 100) % 0x8FF
    v11_byte = new_v11 & 0xFF
    password_byte = v11_byte ^ flag[i]
    password.append(chr(password_byte))
    v11 = new_v11

print(''.join(password))
#+END_SRC


* FOOTER                                                                                              :ignore:
:PROPERTIES:
:clearpage: t
:END:
#+BEGIN_EXPORT html
<hr>
<footer>
  <div class="container">
    <ul class="menu-list">
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a href="/index.html">Home</a>
      </li>
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a href="/articles/articles.html">Articles</a>
      </li>
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a href="/writeups/writeups.html">Write-Ups</a>
      </li>
      <li class="menu-list-item flex-basis-100-margin fit-content">
        <a class="inactive-link">04-05-2025</a>
      </li>
    </ul>
  </div>
</footer>
#+END_EXPORT

